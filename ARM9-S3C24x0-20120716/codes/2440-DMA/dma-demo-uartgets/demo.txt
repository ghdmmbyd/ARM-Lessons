
========================================================================

** ELF Header Information

    File Name: demo.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x30000000
    Flags: EF_ARM_HASENTRY + EF_ARM_SYMSARESORTED + EF_ARM_MAPSYMSFIRST (0x02000016)

    EABI conformance : ARM EABI Version 2.

    Built with
    ARM C Compiler, ADS1.2 [Build 805]
    ARM/Thumb Macro Assembler vsn ADS1.2 [Build 805]
    ARM Linker, ADS1.2 [Build 805] 

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 1
    Section header entries: 9

    Program header offset: 1604 (0x00000644)
    Section header offset: 1636 (0x00000664)

    Section header string table index: 8

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_W + PF_R + PF_ARM_ENTRY]
    Size : 584 bytes
    Virtual address: 0x30000000


========================================================================

** Section #1 'ER_RO' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 484 bytes (alignment 4)
    Address: 0x30000000

    $a
    demo
        0x30000000:    e3a0dd40    @...    MOV      r13,#0x1000
        0x30000004:    ea00005c    \...    B        c_entry  ; 0x3000017c
    uart_putchar
    .text
        0x30000008:    e3a02450    P$..    MOV      r2,#0x50000000
        0x3000000c:    e5921010    ....    LDR      r1,[r2,#0x10]
        0x30000010:    e3110004    ....    TST      r1,#4
        0x30000014:    0afffffc    ....    BEQ      0x3000000c
        0x30000018:    e5820020     ...    STR      r0,[r2,#0x20]
        0x3000001c:    e1a0f00e    ....    MOV      pc,r14
    puts
        0x30000020:    e52de004    ..-.    STR      r14,[r13,#-4]!
        0x30000024:    e1a03000    .0..    MOV      r3,r0
        0x30000028:    ea000001    ....    B        0x30000034
        0x3000002c:    e2833001    .0..    ADD      r3,r3,#1
        0x30000030:    ebfffff4    ....    BL       uart_putchar  ; 0x30000008
        0x30000034:    e5d30000    ....    LDRB     r0,[r3,#0]
        0x30000038:    e3500000    ..P.    CMP      r0,#0
        0x3000003c:    1afffffa    ....    BNE      0x3000002c
        0x30000040:    e3a0000d    ....    MOV      r0,#0xd
        0x30000044:    ebffffef    ....    BL       uart_putchar  ; 0x30000008
        0x30000048:    e3a0000a    ....    MOV      r0,#0xa
        0x3000004c:    e49de004    ....    LDR      r14,[r13],#4
        0x30000050:    eaffffec    ....    B        uart_putchar  ; 0x30000008
    delay
        0x30000054:    e3a00000    ....    MOV      r0,#0
        0x30000058:    e2800001    ....    ADD      r0,r0,#1
        0x3000005c:    e250cb60    `.P.    SUBS     r12,r0,#0x18000
        0x30000060:    a25cce6a    j.\.    SUBGES   r12,r12,#0x6a0
        0x30000064:    bafffffb    ....    BLT      0x30000058
        0x30000068:    e1a0f00e    ....    MOV      pc,r14
    dma_gets
        0x3000006c:    e59f3168    h1..    LDR      r3,0x300001dc
        0x30000070:    e3a0244b    K$..    MOV      r2,#0x4b000000
        0x30000074:    e5823000    .0..    STR      r3,[r2,#0]
        0x30000078:    e3a03003    .0..    MOV      r3,#3
        0x3000007c:    e5823004    .0..    STR      r3,[r2,#4]
        0x30000080:    e5820008    ....    STR      r0,[r2,#8]
        0x30000084:    e3a00000    ....    MOV      r0,#0
        0x30000088:    e582000c    ....    STR      r0,[r2,#0xc]
        0x3000008c:    e3810770    p...    ORR      r0,r1,#0x1c00000
        0x30000090:    e5820010    ....    STR      r0,[r2,#0x10]
        0x30000094:    e3a00002    ....    MOV      r0,#2
        0x30000098:    e5820020     ...    STR      r0,[r2,#0x20]
        0x3000009c:    e1a0f00e    ....    MOV      pc,r14
    dma_gets2
        0x300000a0:    e3a02450    P$..    MOV      r2,#0x50000000
        0x300000a4:    e5923004    .0..    LDR      r3,[r2,#4]
        0x300000a8:    e3833002    .0..    ORR      r3,r3,#2
        0x300000ac:    e5823004    .0..    STR      r3,[r2,#4]
        0x300000b0:    e5923004    .0..    LDR      r3,[r2,#4]
        0x300000b4:    e3c33001    .0..    BIC      r3,r3,#1
        0x300000b8:    e5823004    .0..    STR      r3,[r2,#4]
        0x300000bc:    e2823024    $0..    ADD      r3,r2,#0x24
        0x300000c0:    e3a0244b    K$..    MOV      r2,#0x4b000000
        0x300000c4:    e5823000    .0..    STR      r3,[r2,#0]
        0x300000c8:    e5923004    .0..    LDR      r3,[r2,#4]
        0x300000cc:    e3833001    .0..    ORR      r3,r3,#1
        0x300000d0:    e5823004    .0..    STR      r3,[r2,#4]
        0x300000d4:    e5923004    .0..    LDR      r3,[r2,#4]
        0x300000d8:    e3833002    .0..    ORR      r3,r3,#2
        0x300000dc:    e5823004    .0..    STR      r3,[r2,#4]
        0x300000e0:    e5820008    ....    STR      r0,[r2,#8]
        0x300000e4:    e592000c    ....    LDR      r0,[r2,#0xc]
        0x300000e8:    e3c00001    ....    BIC      r0,r0,#1
        0x300000ec:    e582000c    ....    STR      r0,[r2,#0xc]
        0x300000f0:    e592000c    ....    LDR      r0,[r2,#0xc]
        0x300000f4:    e3c00002    ....    BIC      r0,r0,#2
        0x300000f8:    e582000c    ....    STR      r0,[r2,#0xc]
        0x300000fc:    e5920010    ....    LDR      r0,[r2,#0x10]
        0x30000100:    e3800880    ....    ORR      r0,r0,#0x800000
        0x30000104:    e5820010    ....    STR      r0,[r2,#0x10]
        0x30000108:    e5920010    ....    LDR      r0,[r2,#0x10]
        0x3000010c:    e3c00660    `...    BIC      r0,r0,#0x6000000
        0x30000110:    e5820010    ....    STR      r0,[r2,#0x10]
        0x30000114:    e5920010    ....    LDR      r0,[r2,#0x10]
        0x30000118:    e3800740    @...    ORR      r0,r0,#0x1000000
        0x3000011c:    e5820010    ....    STR      r0,[r2,#0x10]
        0x30000120:    e5920010    ....    LDR      r0,[r2,#0x10]
        0x30000124:    e3800580    ....    ORR      r0,r0,#0x20000000
        0x30000128:    e5820010    ....    STR      r0,[r2,#0x10]
        0x3000012c:    e5920010    ....    LDR      r0,[r2,#0x10]
        0x30000130:    e3800840    @...    ORR      r0,r0,#0x400000
        0x30000134:    e5820010    ....    STR      r0,[r2,#0x10]
        0x30000138:    e5920010    ....    LDR      r0,[r2,#0x10]
        0x3000013c:    e3c009c0    ....    BIC      r0,r0,#0x300000
        0x30000140:    e5820010    ....    STR      r0,[r2,#0x10]
        0x30000144:    e5920010    ....    LDR      r0,[r2,#0x10]
        0x30000148:    e3c00540    @...    BIC      r0,r0,#0x10000000
        0x3000014c:    e5820010    ....    STR      r0,[r2,#0x10]
        0x30000150:    e5920010    ....    LDR      r0,[r2,#0x10]
        0x30000154:    e1a00a20     ...    MOV      r0,r0,LSR #20
        0x30000158:    e1a00a00    ....    MOV      r0,r0,LSL #20
        0x3000015c:    e5820010    ....    STR      r0,[r2,#0x10]
        0x30000160:    e5920010    ....    LDR      r0,[r2,#0x10]
        0x30000164:    e1800001    ....    ORR      r0,r0,r1
        0x30000168:    e5820010    ....    STR      r0,[r2,#0x10]
        0x3000016c:    e5920020     ...    LDR      r0,[r2,#0x20]
        0x30000170:    e3800002    ....    ORR      r0,r0,#2
        0x30000174:    e5820020     ...    STR      r0,[r2,#0x20]
        0x30000178:    e1a0f00e    ....    MOV      pc,r14
    c_entry
        0x3000017c:    e92d4010    .@-.    STMFD    r13!,{r4,r14}
        0x30000180:    e3a00450    P...    MOV      r0,#0x50000000
        0x30000184:    e5901004    ....    LDR      r1,[r0,#4]
        0x30000188:    e3811002    ....    ORR      r1,r1,#2
        0x3000018c:    e5801004    ....    STR      r1,[r0,#4]
        0x30000190:    e5901004    ....    LDR      r1,[r0,#4]
        0x30000194:    e3c11001    ....    BIC      r1,r1,#1
        0x30000198:    e5801004    ....    STR      r1,[r0,#4]
        0x3000019c:    e5901004    ....    LDR      r1,[r0,#4]
        0x300001a0:    e3811004    ....    ORR      r1,r1,#4
        0x300001a4:    e5801004    ....    STR      r1,[r0,#4]
        0x300001a8:    e5901004    ....    LDR      r1,[r0,#4]
        0x300001ac:    e3c11008    ....    BIC      r1,r1,#8
        0x300001b0:    e5801004    ....    STR      r1,[r0,#4]
        0x300001b4:    e59f4024    $@..    LDR      r4,0x300001e0
        0x300001b8:    e1a00004    ....    MOV      r0,r4
        0x300001bc:    ebffff97    ....    BL       puts  ; 0x30000020
        0x300001c0:    e3a0100a    ....    MOV      r1,#0xa
        0x300001c4:    e1a00004    ....    MOV      r0,r4
        0x300001c8:    ebffffa7    ....    BL       dma_gets  ; 0x3000006c
        0x300001cc:    ebffffa0    ....    BL       delay  ; 0x30000054
        0x300001d0:    e1a00004    ....    MOV      r0,r4
        0x300001d4:    ebffff91    ....    BL       puts  ; 0x30000020
        0x300001d8:    eafffffb    ....    B        0x300001cc
    $d
        0x300001dc:    50000024    $..P    DCD    1342177316
        0x300001e0:    300001e4    ...0    DCD    805306852

** Section #2 'ER_RW' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 100 bytes (alignment 4)
    Address: 0x300001e4

    0x300001e4:   68 65 6c 6c 6f 2c 20 61 6b 61 65 64 75 00 00 00    hello, akaedu...
    0x300001f4:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x30000204:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x30000214:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x30000224:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x30000234:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x30000244:   00 00 00 00                                        ....


** Section #3 '.debug_frame' (SHT_PROGBITS)
    Size   : 160 bytes


** Section #4 '.symtab' (SHT_SYMTAB)
    Size   : 304 bytes (alignment 4)
    String table '.strtab'
    Last local symbol no. 10

    Symbol table .symtab (18 symbols, 10 local)

      #  Symbol Name                Value      Bind  Sec  Type  Size
    ========================================================================

      1  $m                         0x00000004   Lc  Abs   -- 
      2  $a                         0x30000000   Lc    1  Code
      3  $d                         0x300001dc   Lc    1  Data
      4  $d                         0x300001e4   Lc    2  Data
      5  start.s                    0x00000000   Lc  Abs  File
      6  demo                       0x30000000   Lc    1  Sect  0x8
      7  main.c                     0x00000000   Lc  Abs  File
      8  .text                      0x30000008   Lc    1  Sect
      9  .data                      0x300001e4   Lc    2  Sect
     10  .data$0                    0x300001e4   Lc    2  Data
     11  BuildAttributes$$ARM_ISAv4$M$PE$A:L22$X:L11$S22$~IW$USESV6$~STKCKD$USESV7$~SHL$OSPACE
                                    0x00000000   Gb  Abs   -- 
     12  uart_putchar               0x30000008   Gb    1  Code  0x18
     13  puts                       0x30000020   Gb    1  Code  0x34
     14  delay                      0x30000054   Gb    1  Code  0x18
     15  dma_gets                   0x3000006c   Gb    1  Code  0x34
     16  dma_gets2                  0x300000a0   Gb    1  Code  0xdc
     17  c_entry                    0x3000017c   Gb    1  Code  0x60
     18  src                        0x300001e4   Gb    2  Data  0x64


** Section #5 '.strtab' (SHT_STRTAB)
    Size   : 192 bytes


** Section #6 '.note' (SHT_NOTE)
    Size   : 24 bytes (alignment 4)


** Section #7 '.comment' (SHT_PROGBITS)
    Size   : 204 bytes


** Section #8 '.shstrtab' (SHT_STRTAB)
    Size   : 84 bytes


